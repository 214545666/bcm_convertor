{"version":3,"sources":["webpack:///./libs/kitten-player/src/acceptance_test.ts"],"names":["_assert_tool","set_acceptance_test","ht","store_manager","test_done","test_result","success","message","register_test_block_domain_function","get_registry","listen_test_finished","get_event_bus","runtime_manager","idle","immediate","sub","window","acceptance_test_check_done","v_done","get_state","variable_states","name","is_pass","get_runtime_manager","get_global_variable","id","get_test_result","acceptance_test_get_result","acceptance_test_reset","reset_assert_tool","test_set_change_bcm","check_load_is_done","cloud_states","loading_state","_test_finished_listeners","get_assert_tool","undefined","assert_tool","cb","push","registry","subscribe_test_done","test_blocks","i","length","register_test_blocks","get_result","reset"],"mappings":"8gBA4EIA,E,8CAlEG,SAASC,EAAoBC,GAClC,GAAKA,GAAOC,IAAZ,CAGA,IAAIC,GAAY,EACZC,EAA8C,CAChDC,SAAS,EACTC,QAAS,IAEXC,EAAoCN,EAAGO,gBACvCC,GAAqB,WACnBN,GAAY,KAEdF,EAAGS,gBAAgBC,gBAAgBC,KAAKC,UAAUC,KAAI,WACpDX,GAAY,KAGbY,OAAeC,2BAA6B,WAE3C,IAAMC,EAAS,IACbf,IAAcgB,YAAYC,gBAC1B,CAAEC,KAAM,SAEV,GAAIH,EAAQ,CAEV,IAAMI,EAAsE,IAA5DpB,EAAGqB,sBAAsBC,oBAAoBN,EAAOO,IAOpE,OANIH,IACFjB,EAAc,CACZC,SAAS,EACTC,QAAS,KAGNe,EAQT,OAJIlB,IACFC,EAAcqB,KAGTtB,GAGRY,OAAeW,2BAA6B,WAC3C,OAAOtB,GAGRW,OAAeY,sBAAwB,WACtCvB,EAAc,CACZC,SAAS,EACTC,QAAS,IAEXH,GAAY,EACZyB,KAGFC,KAIK,SAASA,IACbd,OAAee,mBAAqB,WACnC,MAAgE,cAAzD5B,IAAcgB,YAAYa,aAAaC,eAKlD,IAAMC,EAAsC,GAErC,SAASC,IAId,OAHoBC,MAAhBpC,IACFA,EAAeqC,YAEVrC,EAGF,SAASU,EAAqB4B,GACnCJ,EAAyBK,KAAKD,GAGzB,SAAS9B,EAAoCgC,IAKlDC,EAJgCC,4BAC5BF,EACAL,KAFIM,sBAIY,WAClB,IAAK,IAAIE,EAAI,EAAGA,EAAIT,EAAyBU,OAAQD,IACnDT,EAAyBS,QAKxB,SAASE,EAAqBL,GACnCE,kBAA4BF,GAC5BhC,EAAoCgC,GAG/B,SAASd,IACd,OAAOS,IAAkBW,aAGpB,SAASjB,IACd,OAAOM,IAAkBY","file":"1.f2ae9fa040ecdb1371ad.js","sourcesContent":["import * as _ from 'lodash';\nimport { store_manager } from './redux/store';\nimport {\n  Heart,\n  Registry,\n} from './heart';\n\nimport * as test_blocks from '@cmao/heart/build/dev_tool/test_blocks';\nimport * as assert_tool from '@cmao/heart/build/dev_tool/assert_tool';\n\nexport function set_acceptance_test(ht:Heart) {\n  if (!ht || !store_manager) {\n    return;\n  }\n  let test_done = false;\n  let test_result:assert_tool.AssertionToolResult = {\n    success: false,\n    message: '',\n  };\n  register_test_block_domain_function(ht.get_registry());\n  listen_test_finished(() => {\n    test_done = true;\n  });\n  ht.get_event_bus().runtime_manager.idle.immediate.sub(() => {\n    test_done = true;\n  });\n\n  (window as any).acceptance_test_check_done = function () {\n    // Check if test using variable 'DONE'.\n    const v_done = _.find(\n      store_manager.get_state().variable_states,\n      { name: 'DONE' },\n    );\n    if (v_done) {\n      // Check if test done with 'DONE' variable, if so save result and return;\n      const is_pass = ht.get_runtime_manager().get_global_variable(v_done.id) === 1;\n      if (is_pass) {\n        test_result = {\n          success: true,\n          message: '',\n        };\n      }\n      return is_pass;\n    }\n\n    // Check if test done with 'Test is done' block, if so, save result and return;\n    if (test_done) {\n      test_result = get_test_result();\n    }\n\n    return test_done;\n  };\n\n  (window as any).acceptance_test_get_result = function () : assert_tool.AssertionToolResult {\n    return test_result;\n  };\n\n  (window as any).acceptance_test_reset = function () {\n    test_result = {\n      success: false,\n      message: '',\n    };\n    test_done = false;\n    reset_assert_tool();\n  };\n\n  test_set_change_bcm();\n\n}\n\nexport function test_set_change_bcm() {\n  (window as any).check_load_is_done = function() {\n    return store_manager.get_state().cloud_states.loading_state === 'load_done';\n  };\n}\n\nlet _assert_tool:assert_tool.TestAssertionTool;\nconst _test_finished_listeners:Function[] = [];\n\nexport function get_assert_tool() {\n  if (_assert_tool == undefined) {\n    _assert_tool = assert_tool.create();\n  }\n  return _assert_tool;\n}\n\nexport function listen_test_finished(cb:() => void) {\n  _test_finished_listeners.push(cb);\n}\n\nexport function register_test_block_domain_function(registry:Registry) {\n  const { subscribe_test_done } = test_blocks.register_domain_functions(\n      registry,\n      get_assert_tool(),\n  );\n  subscribe_test_done(() => {\n    for (let i = 0; i < _test_finished_listeners.length; i++) {\n      _test_finished_listeners[i]();\n    }\n  });\n}\n\nexport function register_test_blocks(registry:Registry) {\n  test_blocks.register_blocks(registry);\n  register_test_block_domain_function(registry);\n}\n\nexport function get_test_result() {\n  return get_assert_tool().get_result();\n}\n\nexport function reset_assert_tool() {\n  return get_assert_tool().reset();\n}\n"],"sourceRoot":""}